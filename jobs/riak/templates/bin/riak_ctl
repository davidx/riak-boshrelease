#!/bin/bash

# Control script to start/stop ruby/rack riak job on a BOSH controlled VM

set -e # exit immediately if a simple command exits with a non-zero status
set -u # report the usage of uninitialized variables
set +x

# Setup env vars and folders for the monit script
source /var/vcap/jobs/riak/helpers/ctl_setup.sh 'riak'

STORE=/var/vcap/store/riak-dev

case $1 in

  start)
    pid_guard $PIDFILE "riak"

    # riak installation needs erlang binaries
    PATH=/var/vcap/packages/erlang/bin:$PATH
    
    # https://wiki.basho.com/Building-a-Development-Environment.html
    echo Starting riak
    /var/vcap/packages/riak/rel/bin/riak start >>$LOG_DIR/riak.stdout.log 2>>$LOG_DIR/riak.stderr.log

    # run 'raik-admin status' until it doesn't say 'Node is not running!'
    for (( i = 0; i < 10; i++ ))
    do
      status=$(/var/vcap/packages/riak/rel/bin/riak-admin status)
      if [[ "${status}" = 'Node is not running!' ]]
      then
        echo "${status}"
        break;
      fi
      sleep 1;
    done

    # get pid of erlang beam process
    pid=$(ps ax | grep "/var/vcap/packages/riak/.*/bin/beam" | grep -v grep | awk '{ print $1 }')
    echo "${pid}" > $PIDFILE
    
    # if this is the first node 'riak/0'
    # then join to all other nodes
    set +e
    if [[ $JOB_INDEX = 0 ]]
    then
      for node in $NOT_FIRST_NODES
      do
        echo "Joining $NODES_FIRST to ${node}"
        /var/vcap/packages/riak/rel/bin/riak-admin cluster join "${node}"
      done
    fi
    ;;

  stop)
    echo Stopping riak
    
    # Attempt to leave the ring
    set +e
    /var/vcap/packages/riak/rel/bin/riak-admin cluster leave >>$LOG_DIR/riak.stdout.log 2>>$LOG_DIR/riak.stderr.log
    set -e
    
    /var/vcap/packages/riak/rel/bin/riak stop >>$LOG_DIR/riak.stdout.log 2>>$LOG_DIR/riak.stderr.log
    rm $PIDFILE
    ;;

  logs)
    cat $LOG_DIR/*
    ;;

  tail)
    tail -f $LOG_DIR/*
    ;;

  clearlogs)
    rm $LOG_DIR/*
    ;;

  *)
  echo "Usage: riak_ctl {start|stop|logs|tail|clearlogs}" ;;
esac
exit 0
